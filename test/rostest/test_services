#!/usr/bin/env python
#
# Copyright 2020, Stefano Dell'Orto
# License: BSD
#   https://raw.githubusercontent.com/allxone/sensehat_ros/master/LICENSE
#
from __future__ import print_function
PKG='sensehat_ros'

# Level 2: ROS node unit test
# (cfr. http://wiki.ros.org/action/show/Quality/Tutorials/UnitTesting)
# Test uses simulation via sense_emu (required)

import sys
import unittest
import rospy
import random
from colorsys import hsv_to_rgb

from sensehat_ros.srv import *
from sensehat_ros.msg import Environmental, IMU

from sensehat_ros.host import Host


class TestHostServices(unittest.TestCase):
    def _valid_humidity(self, data):
        return (0 <= data <= 100)
    def _valid_temperature(self, data):
        return (-40 <= data <= 120)
    def _valid_pressure(self, data):
        return (260 <= data <= 1260)
    def _valid_compass(self, data):
        return (0 <= data <= 360)


    def testGetHumidity(self):
        rospy.wait_for_service('GetHumidity')
        getHumidity = rospy.ServiceProxy('GetHumidity', GetHumidity)
        resp1 = getHumidity()

        self.assertTrue(self._valid_humidity(resp1.humidity))


    def testGetPressure(self):
        rospy.wait_for_service('GetPressure')
        getPressure = rospy.ServiceProxy('GetPressure', GetPressure)
        resp1 = getPressure()
        self.assertTrue(self._valid_pressure(resp1.pressure))


    def testGetEnvironmental(self):
        rospy.wait_for_service('GetEnvironmental')
        getEnvironmental = rospy.ServiceProxy('GetEnvironmental', GetEnvironmental)
        resp1 = getEnvironmental()
        self.assertTrue(
            self._valid_humidity(resp1.environmental.humidity) and 
            self._valid_temperature(resp1.environmental.temperature_from_humidity) and 
            self._valid_temperature(resp1.environmental.temperature_from_pressure) and 
            self._valid_pressure(resp1.environmental.pressure))


    def testGetIMU(self):
        rospy.wait_for_service('GetIMU')
        getIMU = rospy.ServiceProxy('GetIMU', GetIMU)
        for mode in [
            'get_orientation_radians_rpy',
            'get_orientation_degrees_rpy',
            'get_compass_raw_xyz',
            'get_gyroscope_rpy',
            'get_gyroscope_raw_xyz',
            'get_accelerometer_rpy',
            'get_compass_raw_xyz']:
            resp1 = getIMU(mode)
            self.assertEqual(resp1.imu.mode, mode)
            self.assertIsNotNone(resp1.imu.x)
            self.assertIsNotNone(resp1.imu.y)
            self.assertIsNotNone(resp1.imu.z)


    def testGetCompass(self):
        rospy.wait_for_service('GetCompass')
        getCompass = rospy.ServiceProxy('GetCompass', GetCompass)
        resp1 = getCompass()
        self.assertTrue(self._valid_compass(resp1.compass)) 


    def testClear(self):
        rospy.wait_for_service('Clear')
        R = [255, 0, 0]
        clear = rospy.ServiceProxy('Clear', Clear)
        clear(R, 1)
        self.assertTrue(True)


    def testShowLetter(self):
        rospy.wait_for_service('ShowLetter')
        FT = [0, 255, 0]
        BT = [255, 0, 0]
        svc = rospy.ServiceProxy('ShowLetter', ShowLetter)
        svc("T", FT, BT, 1)
        self.assertTrue(True)


    def testShowMessage(self):
        rospy.wait_for_service('ShowMessage')
        FT = [0, 255, 0]
        BT = [255, 0, 0]
        svc = rospy.ServiceProxy('ShowMessage', ShowMessage)
        svc("TEST", 0.1, FT, BT)
        self.assertTrue(True)


    def testSetPixels(self):
        rospy.wait_for_service('SetPixels')
        pixels = map(lambda x : 
            (random.randint(0,255), random.randint(0,255), random.randint(0,255)),
            range(64))
        svc = rospy.ServiceProxy('SetPixels', SetPixels)
        (r, g, b) = zip(*pixels)
        svc(r, g, b, 1)
        self.assertTrue(True)


    def testRainbox(self):
        rospy.wait_for_service('SetPixels')
        svc = rospy.ServiceProxy('SetPixels', SetPixels)

        hues = [
            0.00, 0.00, 0.06, 0.13, 0.20, 0.27, 0.34, 0.41,
            0.00, 0.06, 0.13, 0.21, 0.28, 0.35, 0.42, 0.49,
            0.07, 0.14, 0.21, 0.28, 0.35, 0.42, 0.50, 0.57,
            0.15, 0.22, 0.29, 0.36, 0.43, 0.50, 0.57, 0.64,
            0.22, 0.29, 0.36, 0.44, 0.51, 0.58, 0.65, 0.72,
            0.30, 0.37, 0.44, 0.51, 0.58, 0.66, 0.73, 0.80,
            0.38, 0.45, 0.52, 0.59, 0.66, 0.73, 0.80, 0.87,
            0.45, 0.52, 0.60, 0.67, 0.74, 0.81, 0.88, 0.95,
            ]
        self.assertTrue(True)


        def scale(v):
            return int(v * 255)

        for _ in range(100):
            # Rotate the hues
            hues = [(h + 0.01) % 1.0 for h in hues]
            # Convert the hues to RGB values
            pixels = [hsv_to_rgb(h, 1.0, 1.0) for h in hues]
            # hsv_to_rgb returns 0..1 floats; convert to ints in the range 0..255
            pixels = [[scale(r), scale(g), scale(b)] for r, g, b in pixels]
            # Update the display
            (r, g, b) = zip(*pixels)
            svc(r, g, b, 0)
            rospy.sleep(0.04)
        
        self.assertTrue(True)

        
if __name__ == '__main__':
    import rostest
    rostest.rosrun(PKG, "TestHostServices", TestHostServices, sys.argv)